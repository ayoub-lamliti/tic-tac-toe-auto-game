let c = 3; const A = "<div class='square'></div>"; let a = null, u = null, C = null, w = null, q = [], y = [], h = q, X = [], m = [], g = [], b = [], E = [], v = []; const o = "x", l = "o"; let n = { winner: { [o]: 0, [l]: 0 }, pointXO: { [o]: [], [l]: [] }, pointPossibilitiesCpu: { [o]: [], [l]: [] }, possibilityThreePointEmpty: { possibility: [] }, possibilitiesThreePointNotEmpty: [], start: !0, player_now: u, gameOver: !1, playCpu: !1, playNotEasy: !1 }; const N = document.querySelector("#increment"), B = document.querySelector("#decrement"), d = document.querySelector("#quantity"); N.addEventListener("click", () => { parseInt(d.value) < 15 && (d.value = parseInt(d.value) + 2, c = parseInt(d.value)) }); B.addEventListener("click", () => { parseInt(d.value) > 3 && (d.value = parseInt(d.value) - 2, c = parseInt(d.value)) }); document.getElementById("button").addEventListener("click", () => { document.querySelector('input[name="player"]:checked').value === o ? (u = o, P(o)) : (u = l, P(l)), C = u === o ? l : o, document.querySelector("#header-and-board-wrapper").classList.add("d-block"), document.querySelector(".container").classList.add("d-none"), W() }); document.getElementById("checkAuto").addEventListener("change", e => { n.playCpu = e.target.checked, n.playCpu ? document.querySelector(".checkHardOrEasy").classList.add("d-block-force") : document.querySelector(".checkHardOrEasy").classList.remove("d-block-force") }); document.getElementById("checkHardOrEasy").addEventListener("change", e => { n.playNotEasy = e.target.checked }); const W = () => { let e = ""; const t = c * c; for (let i = 0; i < t; i++)e += A; document.querySelector(".grid-container").style = `grid-template-columns: ${c}fr repeat(${c - 1}, auto);`, document.querySelector(".grid-container").innerHTML = e, c > 3 && document.querySelectorAll(".square").forEach(i => i.classList.add("square-countBig")), a = document.querySelectorAll(".square"), y = Array.from({ length: t }, (i, s) => s), g = Array.from({ length: c }, (i, s) => []), b = c, y.forEach(i => { let s = b - c; y.slice(s, b).length && m.push(y.slice(s, b)), b += c }), m.forEach(i => { let s = 0; i.forEach(p => { g[s].push(p), s = s + 1 }) }); let r = 0; m.forEach(i => { E.push(i[r]), r = r + 1 }), r = c - 1, m.forEach(i => { v.push(i[r]), r = r - 1 }), w = E.filter(i => v.includes(i))[0], q.push(...m, ...g, E, v), h = q, X = [E[0], v[0], v.slice(-1)[0], E.slice(-1)[0]], a.forEach((i, s) => { i.setAttribute("cell", s), i.addEventListener("click", p => { i.getAttribute("player") || (f(s), n.playCpu && !n.gameOver && J(), H()) }) }) }, M = () => { const e = u === o ? l : o, t = n.start ? u : e; return n.start = !n.start, t }, T = (e = !1) => { h.forEach(t => { t.every(r => I(r, o)) && (O(t, o), n.winner = { ...n.winner, [o]: n.winner.x + 1 }), t.every(r => I(r, l)) && (O(t, l), n.winner = { ...n.winner, [l]: n.winner.o + 1 }), e && O([], "we drew") }) }, O = (e, t) => { e.length && (u === t ? t = "winner" : t = "loser", G(e, t), t = "You " + t), U(t), R(), n.gameOver = !0 }, H = () => { document.getElementById("countWinnerX").textContent = n.winner.x, document.getElementById("countWinnerO").textContent = n.winner.o }, U = e => { alertify.confirm("Winner !!", e, t => S(), t => S()) }, G = (e, t) => { e.forEach(r => { a[r].classList.add(t) }) }, R = () => { a.forEach(e => { e.removeEventListener("click", t => { }) }) }, I = (e, t) => a[e].getAttribute("player") === t, f = e => { const t = M(); n.player_now = t, j(t, e), t === o ? (a[e].classList.add(o), P(l)) : (a[e].classList.add(l), P(o)), a[e].setAttribute("player", t), a[e].innerText = t, a[e].classList.add("active"), T() }, P = e => { document.getElementById("turn").textContent = e.toUpperCase() }, j = (e, t) => { e === o ? n.pointXO[o].push(t) : n.pointXO[l].push(t), Y(e), $() }, $ = () => { const e = h.filter(t => t.every(r => n.pointXO[o].every(i => i !== r) && n.pointXO[l].every(i => i !== r))); n.possibilityThreePointEmpty = { ...n.possibilityThreePointEmpty, possibility: e } }, Y = e => { n.pointPossibilitiesCpu = { ...n.pointPossibilitiesCpu, [e]: z(n.pointXO[e]) } }, z = e => { if (e.length > 1) { const t = c - 1, r = 1; let i = {}; return h.map((s, p) => { i = { ...i, [p]: [] }, s.some(k => { e.includes(k) && i[p].push(k) }) }), Object.values(i).filter(s => s.length > r && s.length <= t) } return [e] }, D = () => ({ [o]: x(o, l), [l]: x(l, o) }), x = (e, t) => h.filter(r => n.pointPossibilitiesCpu[e].some(i => i.every(s => r.includes(s)))).filter(r => n.pointXO[t].every(i => !r.includes(i))), F = () => { n.possibilitiesThreePointNotEmpty = h.filter(e => n.possibilityThreePointEmpty.possibility.every(t => !e.every(r => t.includes(r)))) }, J = () => { F(), Q(), K() }, K = () => { const e = D(), t = _(e, u), r = _(e, C); n.pointXO[n.player_now].length > 1 && n.player_now !== C && (t.possibilitiesWinner ? t.point[0].difference.length > 1 ? r.possibilitiesWinner ? f(r.point[0].difference[0]) : L() : f(t.point[0].difference[0]) : r.possibilitiesWinner ? f(r.point[0].difference[0]) : L()) }, L = () => { const e = Z(); e !== void 0 ? f(e) : T(!0) }, _ = (e, t) => { let r = { [t]: [] }; return e[t].forEach(i => { n.pointPossibilitiesCpu[t].some(s => s.every(p => i.includes(p)) && r[t].push({ i: s, item: i, difference: i.filter(p => !s.includes(p)) })) }), { player: [t][0], possibilitiesWinner: r[t].length, point: r[t] } }, Q = () => { if (n.pointXO[n.player_now].length === 1) { let e; n.pointXO[n.player_now][0] !== w ? e = w : e = V(), f(e) } }, V = () => { let e = null; n.playNotEasy ? e = X : e = y.filter(r => n.pointXO[n.player_now][0] !== r); const t = Math.floor(Math.random() * e.length); return e[t] }, Z = () => { const e = y.filter(r => n.pointXO[o].every(i => i !== r) && n.pointXO[l].every(i => i !== r)), t = Math.floor(Math.random() * e.length); return e[t] }, S = () => { a.forEach(e => { e.innerText = "", e.removeAttribute("player"), e.classList.remove("winner", "loser", "active", "x", "o") }), P(u), n = { ...n, pointXO: { [o]: [], [l]: [] }, pointPossibilitiesCpu: { [o]: [], [l]: [] }, possibilityThreePointEmpty: { possibility: [] }, possibilitiesThreePointNotEmpty: [], start: !0, player_now: u, gameOver: !1 } };
